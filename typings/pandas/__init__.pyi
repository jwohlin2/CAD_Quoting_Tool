from __future__ import annotations

from typing import Any, Iterable, Iterator, Mapping, Sequence

class Series:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...
    def fillna(self, *args: Any, **kwargs: Any) -> Series: ...
    def sum(self, *args: Any, **kwargs: Any) -> Any: ...
    def any(self, *args: Any, **kwargs: Any) -> Any: ...
    def items(self) -> Iterable[tuple[Any, Any]]: ...

class Index:
    def __iter__(self) -> Iterator[Any]: ...

class DataFrame:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> DataFrame: ...
    def iterrows(self) -> Iterable[tuple[Any, Series]]: ...
    def columns(self) -> Sequence[str]: ...
    def items(self) -> Iterable[tuple[Any, Series]]: ...
    @classmethod
    def from_records(cls, data: Iterable[Mapping[str, Any]], *args: Any, **kwargs: Any) -> DataFrame: ...

concat: Any
to_numeric: Any
notna: Any
read_excel: Any
read_csv: Any
ExcelFile: Any
isna: Any

