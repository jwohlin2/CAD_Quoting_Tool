from __future__ import annotations

from typing import Any, Mapping, Sequence

HAS_TRIMESH: bool
HAS_EZDXF: bool
HAS_ODAFC: bool
EZDXF_VERSION: object

class GeometryService:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def extract_occ_features(self, path: str | Any) -> Mapping[str, Any] | None: ...
    def enrich_stl(self, path: str | Any) -> Mapping[str, Any] | None: ...
    def read_step(self, path: str | Any) -> Any: ...
    def read_model(self, path: str | Any) -> Any: ...
    def enrich_occ(self, shape: Any) -> Mapping[str, Any]: ...


def convert_dwg_to_dxf(dwg_path: str, *, out_ver: str = ...) -> str: ...

def get_dwg_converter_path() -> str | None: ...

def require_ezdxf() -> None: ...


def extract_text_lines_from_dxf(path: str, *, include_tables: bool = ...) -> list[str]: ...


def parse_hole_table_lines(lines: Sequence[str]) -> list[Mapping[str, Any]]: ...


def extract_features_with_occ(path: str | Any, **kwargs: Any) -> Mapping[str, Any] | None: ...


def enrich_geo_stl(path: str | Any) -> Mapping[str, Any] | None: ...


def read_step_shape(path: str | Any) -> Any: ...


def read_step_or_iges_or_brep(path: str | Any) -> Any: ...


def read_cad_any(path: str | Any) -> Any: ...


def safe_bbox(shape: Any) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...


def enrich_geo_occ(shape: Any) -> Mapping[str, Any]: ...


def get_import_diagnostics_text() -> str: ...


def map_geo_to_double_underscore(geo: Mapping[str, Any] | dict[str, Any]) -> dict[str, Any]: ...


def collect_geo_features_from_df(df: Any) -> Any: ...


def update_variables_df_with_geo(df: Any, geo: Mapping[str, Any]) -> Any: ...


def upsert_var_row(df: Any, key: str, values: Mapping[str, Any]) -> Any: ...

